/*
 * This program is free software; you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation; You may only use
 * version 2 of the License, you have no option to use any other version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
 * the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program; if
 * not, write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 * -------------------------------------------------------------------------------------------------
 */

/*!
    \class PasswordGenerator

    \brief Interface to generate random passwords.

    Any implementation of this interface generates passwords (normally random passwords).
    The important function is the method getPassword(). It takes the \p length of the password it
    should generate and an optional parameter \p allowedChars that describes the allowed characters.

    It is a string which contains all allowed characters literally. There are four exceptions:
     - \c A-Z is replaced with \c ABCDEFGHIJKLMNOPQRSTUVWXZY.
     - \c a-z is replaced with \c abcdefghijklmnopqrstuvwxzy.
     - \c 0-9 is replaced with \c 0123456789.
     - QString::null indicates that all characters are allowed (a empty string is not permitted)

    It was a deliberate decision to use not regular expressions because not every user is a
    programmer and lots of characters need to be escaped in RegExps. I didn't want to confuse the
    users, even programmers get confued by RegExps sometimes. <tt>:-)</tt>.

    \ingroup security
    \author Bernhard Walle
    \version $Revision: 1.1 $
    \date $Date: 2003/12/29 10:59:16 $
*/

/*!
    \fn PasswordGenerator::~PasswordGenerator

    Deletes a PasswordGenerator object.
*/

/*!
    \fn PasswordGenerator::getPassword(unsigned int, const QString&)

    Generates a random password of the specified length. The method may throw any
    arbitrary excepting, depending on the implementation. So read the documentation of
    the implementation crefully.
    \param length the length of the password
    \param allowedChars all allowed characters (see class documentation for details) or
           QString::null if all characters are allowed
    \return the password
    \exception PasswordGenerateException if generation failed
*/

/*!
   \fn PasswordGenerator::isSlow() const

   Indicates whether the password generator is slow.
   \return \c true if it is slow, \c false otherwise
*/

// -------------------------------------------------------------------------------------------------


/*!
    \class PasswordGenerateException

    \brief Exception that is thrown if password generations failed.

    There can be different reasons for this. One reason could be that executing an external
    program failed. Another reason could be that a specified file does not exist.

    \ingroup security
    \version $Revision: 1.1 $
    \author Bernhard Walle
    \date $Date: 2003/12/29 10:59:16 $
*/

/*!
    \fn PasswordGenerateException::PasswordGenerateException(const std::string&)

    Creates a new instance of the exception and includes the error message. This
    message is returned by the what() method.
    \param error the error message
*/

// vim: set sw=4 ts=4 et ft=cpp:
